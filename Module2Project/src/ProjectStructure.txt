1.Plan the System Structure
Before diving into coding, it's important to structure the program into several key components:
- Model:
    - Implement the hierarchy of animals using inheritance and polymorphism (`Animal` class, `Carnivore`, `Herbivore`, etc.).
    - Define a `Location` class to represent a specific position on the island (which can hold animals, plants, and handle movements/interactions).

- Controller:
    - Manage animal actions including movement, eating, and breeding. Use multithreading here for simulation cycles.

- View:
    - Build a GUI to visualize the island (e.g., using `Swing` or `JavaFX`) and display the simulation statistics dynamically.

- Utilities:
    - Central configuration for parameters (e.g., max speed for animals, island size, starting populations, etc.).
    - Random number generation utilities for probabilities.

2.Step-by-Step Implementation
	Step 2.1: Define the `Animal` Class
		#Step 2.1: Create an abstract base class `Animal` to represent shared behavior for all animals.
		#Step 2.2: Create Specific Animal Classes such as `Carnivores.Wolf`, `Carnivores.Bear`, `Herbivores.Rabbit`, etc., that extend `Animal`
		#Step 2.3: Define the `Plant` Class. Since plants don't behave like animals, the `Plant` class can be simple.
		#Step 2.4: Create a `Location` Class to represent each cell on the island. It will store animals, plants, and manage interactions.
		#Step 2.5: Implement the Island. It be a 2D array of `Location` objects. It manages the overall simulation.
