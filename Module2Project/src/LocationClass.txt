import java.util.ArrayList;
import java.util.List;

public class Location {
    private final List<Animal> animals;
    private final List<Plant> plants;

    public Location() {
        this.animals = new ArrayList<>();
        this.plants = new ArrayList<>();
    }

    public synchronized List<Animal> getAnimals() {
        return new ArrayList<>(animals); 
    }

    public synchronized List<Plant> getPlants() {
        return new ArrayList<>(plants);
    }

    public synchronized void addAnimal(Animal animal) {
        if (animals.size() < animal.maxPerLocation) {
            animals.add(animal);
        }
    }

    public synchronized void removeAnimal(Animal animal) {
        animals.remove(animal);
    }

    public synchronized void addPlant(Plant plant) {
        if (plants.size() < Plant.MAX_PLANTS) {
            plants.add(plant);
        }
    }

    public Location getNeighbor(int direction, Island island) {
        return island.getNeighbor(this, direction); // Logic handled in the Island class
    }
}

class Island {
    private final Location[][] grid;
    private final int rows;
    private final int cols;

    public Island(int rows, int cols) {
        this.rows = rows;
        this.cols = cols;
        this.grid = new Location[rows][cols];
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                grid[i][j] = new Location();
            }
        }
    }

    public Location getLocation(int row, int col) {
        if (row >= 0 && row < rows && col >= 0 && col < cols) return grid[row][col];
        return null; // Out-of-bounds
    }

    public Location getNeighbor(Location location, int direction) {
        // Define neighbor logic based on the direction
        // Example: 0 = North, 1 = East, 2 = South, 3 = West
    }

    public int getRows() {
        return rows;
    }

    public int getCols() {
        return cols;
    }
}