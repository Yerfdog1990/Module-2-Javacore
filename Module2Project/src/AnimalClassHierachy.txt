import java.util.List;
import java.util.Random;

// Abstract Animal Class
public abstract class Animal {
    protected final double weight;
    protected final int maxPerLocation;
    protected final int maxSpeed;
    protected final double foodRequired;
    protected double currentFood; // Tracks how much food has been eaten

    public Animal(double weight, int maxPerLocation, int maxSpeed, double foodRequired) {
        this.weight = weight;
        this.maxPerLocation = maxPerLocation;
        this.maxSpeed = maxSpeed;
        this.foodRequired = foodRequired;
        this.currentFood = 0;
    }

    public boolean isHungry() {
        return currentFood < foodRequired; 

    // Abstract Methods
    public abstract void eat(List<Animal> animals, List<Plant> plants);

    public abstract Location move(Location currentLocation, Island island);

    public abstract Animal breed();

    public abstract String getType();
}

// Herbivore Class
class Herbivore extends Animal {
    public Herbivore(double weight, int maxPerLocation, int maxSpeed, double foodRequired) {
        super(weight, maxPerLocation, maxSpeed, foodRequired);
    }

    @Override
    public void eat(List<Animal> animals, List<Plant> plants) {
        for (Plant plant : plants) {
            if (isHungry()) {
                plants.remove(plant); // Consume a plant
                currentFood += 1;    // Each plant provides 1kg of food
                break;
            }
        }
    }

    @Override
    public Location move(Location currentLocation, Island island) {
        Random random = new Random();
        int direction = random.nextInt(4); // Choose a random direction
        return currentLocation.getNeighbor(direction, island);
    }

    @Override
    public Animal breed() {
        if (Math.random() < 0.4) { // 40% chance of breeding
            return new Herbivore(weight, maxPerLocation, maxSpeed, foodRequired);
        }
        return null;
    }

    @Override
    public String getType() {
        return "Herbivore";
    }
}

// Carnivore Class
class Carnivore extends Animal {
    public Carnivore(double weight, int maxPerLocation, int maxSpeed, double foodRequired) {
        super(weight, maxPerLocation, maxSpeed, foodRequired);
    }

    @Override
    public void eat(List<Animal> animals, List<Plant> plants) {
        for (Animal prey : animals) {
            if (prey instanceof Herbivore && isHungry() && Math.random() < getHuntingProbability(prey)) {
                animals.remove(prey); // Consume the prey
                currentFood += prey.weight; // Add the prey's weight as food
                break;
            }
        }
    }

    @Override
    public Location move(Location currentLocation, Island island) {
        Random random = new Random();
        int direction = random.nextInt(4); // Choose a random direction
        return currentLocation.getNeighbor(direction, island);
    }

    @Override
    public Animal breed() {
        if (Math.random() < 0.2) { // 20% chance of breeding
            return new Carnivore(weight, maxPerLocation, maxSpeed, foodRequired);
        }
        return null;
    }

    @Override
    public String getType() {
        return "Carnivore";
    }

    // Private method to determine hunting success for prey
    private double getHuntingProbability(Animal prey) {
        if (this instanceof Wolf && prey instanceof Rabbit) return 0.6; // High chance
        if (this instanceof Bear && prey instanceof Boa) return 0.8;
        return 0.2; // Default low chance
    }
}